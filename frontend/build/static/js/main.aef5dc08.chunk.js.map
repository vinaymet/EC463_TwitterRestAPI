{"version":3,"sources":["dataFetch.js","googleAuth.js","App.js","reportWebVitals.js","index.js"],"names":["DataFetch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isClicked","account","botScore","majorTopics","sentimentScore","handleSubmit","bind","assertThisInitialized","event","preventDefault","console","log","componentDidMount","inputAccount","accountToCheckStr","String","setState","req","JSON","stringify","username","requestOptions","method","headers","Content-Type","body","fetch","response","json","data","BotScore","Major_Categories","Sentiment","_this2","_this$state","react_default","a","createElement","className","onSubmit","type","value","onChange","e","target","React","Component","GoogleAuth","_useState","useState","_useState2","slicedToArray","profile","setProfile","clientId","useEffect","gapi","load","client","init","scope","name","email","google_login","buttonText","onLogoutSuccess","onSuccess","res","profileObj","onFailure","err","cookiePolicy","isSignedIn","App","googleAuth","dataFetch","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.aef5dc08.chunk.js","sourcesContent":["import React from 'react';\n\nclass DataFetch extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isClicked: false,\n            account: null,\n            botScore: null,\n            majorTopics: null,\n            sentimentScore: null\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    // Once account is submitted\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(this.state.account)\n        this.componentDidMount(this.state.account)\n    }\n\n    // API Call\n    // CORS error: https://stackoverflow.com/questions/43871637/no-access-control-allow-origin-header-is-present-on-the-requested-resource-whe/43881141#43881141\n    async componentDidMount(inputAccount) {\n        let accountToCheckStr = String(inputAccount)\n        console.log(this.state.isClicked)\n        \n        this.setState({ botScore: \"\" });\n        this.setState({ majorTopics: \"\" });\n        this.setState({ sentimentScore: \"\" });    \n\n        if (this.state.isClicked === true) {\n            let req = JSON.stringify({ username: accountToCheckStr });\n            const requestOptions = {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: req,\n            };\n            const response = await fetch(\"https://arcane-lowlands-40251.herokuapp.com/https://vab-apitest.herokuapp.com/twitter\", requestOptions);\n            const data = await response.json();\n            console.log(data);\n\n            this.setState({ botScore: data.BotScore });\n            this.setState({ majorTopics: data.Major_Categories });\n            this.setState({ sentimentScore: data.Sentiment });            \n        }\n    }\n\n    render() {\n        const { account, botScore, majorTopics, sentimentScore } = this.state;\n        return (\n            <div className=\"card text-center m-3\">\n                <div>\n                    <form onSubmit={this.handleSubmit}>\n                    <label>Enter the desired Twitter handle below:    \n                        <br /> <br /><div>\n                        <input \n                            type=\"text\" \n                            value={account}\n                            onChange={(e) => this.setState({account: e.target.value, isClicked: true})}\n                        />\n                        </div>\n                    </label>\n                    <input type=\"submit\" />\n                    </form>\n                </div>\n                <h5>Results may take up to 10 seconds to display below.</h5>\n                <div className=\"card-body\">\n                    Bot Score: {botScore}\n                    <br /> <br />\n                    Major Topics: {majorTopics}\n                    <br /> <br />\n                    Sentiment: {sentimentScore}\n                    <br /> <br />\n                    <h2> {this.props.account} </h2>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DataFetch; ","// Source: https://blog.logrocket.com/guide-adding-google-login-react-app/\n\nimport React, { useState, useEffect } from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport { gapi } from 'gapi-script';\n\nfunction GoogleAuth() {\n    const [ profile, setProfile ] = useState(false);\n    const clientId = '327176835226-404pkvtl61sd7kvarrl3sh31v96e9qtf.apps.googleusercontent.com';\n    useEffect(() => {\n        const initClient = () => {\n            gapi.client.init({\n                clientId: clientId,\n                scope: ''\n            });\n        };\n        gapi.load('client:auth2', initClient);\n    });\n\n    const onSuccess = (res) => {\n        setProfile(res.profileObj);\n    };\n\n    const onFailure = (err) => {\n        console.log('failed', err);\n    };\n\n    const logOut = () => {\n        setProfile(null);\n    };\n\n    return (\n        <div>\n            {profile ? (\n                <div>\n                    <h3>Logged in as {profile.name} ({profile.email})</h3>\n                    <GoogleLogout clientId={clientId} buttonText=\"Log out\" onLogoutSuccess={logOut} />\n                </div>\n            ) : (\n                <GoogleLogin\n                    clientId={clientId}\n                    buttonText=\"Sign in with Google\"\n                    onSuccess={onSuccess}\n                    onFailure={onFailure}\n                    cookiePolicy={'single_host_origin'}\n                    isSignedIn={true}\n                />\n            )}\n            <br />\n            <br />\n        </div>\n    );\n}\nexport default GoogleAuth;","import './App.css';\nimport DataFetch from './dataFetch';\nimport GoogleAuth from './googleAuth';\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          EC463 Mini Project - Twitter Account APIs\n        </h1>\n        <GoogleAuth/>\n        <DataFetch/>\n        <h3>\n          Made by Vinay Metlapalli, Beatriz Sicilia, and Alex Zhou\n        </h3>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}